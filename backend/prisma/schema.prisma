generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String
  firstName    String
  lastName     String
  role         UserRole   @default(STORE_OWNER)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  auditLogs    AuditLog[]
  ownedTenants Tenant[]

  @@map("users")
}

model Tenant {
  id            String         @id @default(uuid())
  name          String
  subdomain     String         @unique
  description   String?
  ownerId       String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  auditLogs     AuditLog[]
  categories    Category[]
  productImages ProductImage[]
  products      Product[]
  carts         Cart[]
  orders        Order[]
  settings      StoreSettings?
  owner         User           @relation(fields: [ownerId], references: [id])

  @@map("tenants")
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String
  description String?
  parentId    String?
  tenantId    String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  products    Product[]

  @@unique([slug, tenantId])
  @@map("categories")
}

model Product {
  id            String         @id @default(uuid())
  title         String
  description   String?
  slug          String
  price         Float
  stockQuantity Int            @default(0)
  status        ProductStatus  @default(DRAFT)
  tenantId      String
  categoryId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  images        ProductImage[]
  category      Category?      @relation(fields: [categoryId], references: [id])
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  cartItems     CartItem[]
  orderItems    OrderItem[]

  @@unique([slug, tenantId])
  @@map("products")
}

model ProductImage {
  id        String    @id @default(uuid())
  url       String
  altText   String?
  filename  String
  productId String
  tenantId  String
  sortOrder Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  tenant    Tenant    @relation(fields: [tenantId], references: [id])

  @@map("product_images")
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String
  resource   String
  resourceId String?
  userId     String?
  tenantId   String?
  oldData    Json?
  newData    Json?
  createdAt  DateTime @default(now())
  // For anonymous users
  anonymousUserEmail String?
  anonymousUserName  String?
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum UserRole {
  PLATFORM_ADMIN
  STORE_OWNER
}

model Cart {
  id          String     @id @default(uuid())
  sessionId   String     @unique
  tenantId    String
  customerEmail String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  items       CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  tenantId      String
  customerEmail String
  customerName  String
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  paymentStatus PaymentStatus @default(PENDING)
  shippingAddress Json?
  billingAddress  Json?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  items         OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  title     String
  createdAt DateTime @default(now())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum ProductStatus {
  ACTIVE
  DRAFT
  DELETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model StoreSettings {
  id                String    @id @default(uuid())
  tenantId          String    @unique
  // Footer page content (stored as JSON with title and content)
  aboutUs           Json?
  contact           Json?
  privacyPolicy     Json?
  termsOfService    Json?
  shippingInfo      Json?
  returns           Json?
  faq               Json?
  // Social media URLs
  facebookUrl       String?
  twitterUrl        String?
  instagramUrl      String?
  linkedinUrl       String?
  youtubeUrl        String?
  // Other settings
  trackOrderUrl     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("store_settings")
}
